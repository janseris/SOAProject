// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Microservices.IoT.Data.Models
{
    public partial class MicroservicesContext : DbContext
    {
        public MicroservicesContext()
        {
        }

        public MicroservicesContext(DbContextOptions<MicroservicesContext> options)
            : base(options)
        {
        }

        public virtual DbSet<EVENT> EVENT { get; set; }
        public virtual DbSet<EVENT_TYPE> EVENT_TYPE { get; set; }
        public virtual DbSet<FOOD> FOOD { get; set; }
        public virtual DbSet<FOOD_HEALTH_RATING> FOOD_HEALTH_RATING { get; set; }
        public virtual DbSet<FOOD_TYPE> FOOD_TYPE { get; set; }
        public virtual DbSet<FRIDGE> FRIDGE { get; set; }
        public virtual DbSet<FRIDGE_TYPE> FRIDGE_TYPE { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=LAPTOP-HGEN5Q27\\SQLEXPRESS;Initial Catalog=Microservices;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EVENT>(entity =>
            {
                entity.HasOne(d => d.Fridge)
                    .WithMany(p => p.EVENT)
                    .HasForeignKey(d => d.FridgeID)
                    .HasConstraintName("FK_EVENT_FRIDGE");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.EVENT)
                    .HasForeignKey(d => d.TypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EVENT_EVENT_TYPE");
            });

            modelBuilder.Entity<EVENT_TYPE>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();
            });

            modelBuilder.Entity<FOOD>(entity =>
            {
                entity.HasOne(d => d.Fridge)
                    .WithMany(p => p.FOOD)
                    .HasForeignKey(d => d.FridgeID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_FOOD_FRIDGE");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.FOOD)
                    .HasForeignKey(d => d.TypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FOOD_FOOD_TYPE");
            });

            modelBuilder.Entity<FOOD_HEALTH_RATING>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();
            });

            modelBuilder.Entity<FOOD_TYPE>(entity =>
            {
                entity.HasOne(d => d.HealthRating)
                    .WithMany(p => p.FOOD_TYPE)
                    .HasForeignKey(d => d.HealthRatingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FOOD_TYPE_FOOD_HEALTH_RATING");
            });

            modelBuilder.Entity<FRIDGE>(entity =>
            {
                entity.HasOne(d => d.Type)
                    .WithMany(p => p.FRIDGE)
                    .HasForeignKey(d => d.TypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FRIDGE_FRIDGE_TYPE");
            });

            modelBuilder.Entity<FRIDGE_TYPE>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}